// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	user "be13/project/features/user"

	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the RepositoryEntities type
type UserRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *UserRepo) Create(input user.CoreUser) (int, error) {
	ret := _m.Called(input)

	var r0 int
	if rf, ok := ret.Get(0).(func(user.CoreUser) int); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(user.CoreUser) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *UserRepo) DeleteById(id int) (user.CoreUser, error) {
	ret := _m.Called(id)

	var r0 user.CoreUser
	if rf, ok := ret.Get(0).(func(int) user.CoreUser); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.CoreUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *UserRepo) GetAll() ([]user.CoreUser, error) {
	ret := _m.Called()

	var r0 []user.CoreUser
	if rf, ok := ret.Get(0).(func() []user.CoreUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.CoreUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UserRepo) GetById(id int) (user.CoreUser, error) {
	ret := _m.Called(id)

	var r0 user.CoreUser
	if rf, ok := ret.Get(0).(func(int) user.CoreUser); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.CoreUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, input
func (_m *UserRepo) Update(id int, input user.CoreUser) error {
	ret := _m.Called(id, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, user.CoreUser) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
